#  A github workflow to build custom android common kernels with specified parameters
#  Copyright (C) 2025 chickendrop89
#
#  Licensed under GPL v3 or later

name: Build Android Common Kernel

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      ack_branch:
        description: 'Android-common-kernel branch (e.g. common-android13-5.15)'
        required: true
        default: 'common-android13-5.15'
        type: string
      custom_kernel_repo:
        description: 'Custom kernel repository'
        required: true
        default: 'https://github.com/chickendrop89/device_xiaomi_unified-kernel'
        type: string
      custom_kernel_repo_branch:
        description: 'Custom kernel repository branch'
        required: true
        default: 'android13-5.15-lts'
        type: string
      use_latest_clang:
        description: 'Use the latest clang prebuilts (Check README!)'
        required: true
        default: true
        type: boolean
      anykernel_url_plus_branch:
        description: 'Space-separated AnyKernel3 fork URL + (Optional) Branch'
        required: true
        default: 'https://github.com/chickendrop89/AnyKernel3'
        type: string
      kernel_image_type:
        description: 'Kernel image to package (Image.gz, Image.lz4, etc)'
        required: true
        default: 'Image'
      fast_build:
        description: 'Instruct tools to perform a Fast Build'
        required: true
        default: true
        type: boolean
      use_kleaf:
        description: 'Use the kleaf build system instead of build script'
        required: true
        default: false
        type: boolean
      extra_args:
        description: 'Extra arguments that will be passed to build system/script'
        required: false
      build_configs:
        description: 'Space-separated list of build configurations'
        required: true
        default: 'build.config.gki.aarch64.chickernel build.config.gki.aarch64.chickernel.ksun build.config.gki.aarch64.chickernel.ksun.susfs'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_CONFIGS: ${{ github.event.inputs.build_configs }}
      IMAGE_TYPE: ${{ github.event.inputs.kernel_image_type }}

      ACK_BRANCH: ${{ github.event.inputs.ack_branch }}
      COMMON_REPO: ${{ github.event.inputs.custom_kernel_repo }}
      COMMON_REPO_BRANCH: ${{ github.event.inputs.custom_kernel_repo_branch }}
      AK3_GIT_URL_PLUS_BRANCH: ${{ github.event.inputs.anykernel_url_plus_branch }}

      AK3_DIR: ${{ github.workspace }}/kernel-build/anykernel3
      FINAL_DIR: ${{ github.workspace }}/kernel-build/final_images

    steps:
      - name: Validate inputs
        run: |
          AK3_GIT_URL=$(echo "${AK3_GIT_URL_PLUS_BRANCH}" | awk '{print $1}')
          AK3_GIT_BRANCH=$(echo "${AK3_GIT_URL_PLUS_BRANCH}" | awk '{print $2}')
          
          echo "AK3_GIT_URL=${AK3_GIT_URL}" >> ${GITHUB_ENV}
          echo "AK3_GIT_BRANCH=${AK3_GIT_BRANCH}" >> ${GITHUB_ENV}

          validate_url() {
            if [[ ! "$1" =~ ^https://.+/.+/.+$ ]]; then
              echo "Invalid URL: $1"
              exit 1
            fi
          }
          validate_url ${COMMON_REPO}
          validate_url ${AK3_GIT_URL}

          validate_single_word() {
            if [[ "$1" =~ [[:space:]] ]]; then
              echo "::error::Invalid $2: $1"
              exit 1
            fi
          }

          validate_single_word "${ACK_BRANCH}" "Android-common-kernel branch"
          validate_single_word "${COMMON_REPO_BRANCH}" "Custom Kernel repo branch"
          if [ ! -z "${AK3_GIT_BRANCH}" ]; then
            validate_single_word "${AK3_GIT_BRANCH}" "AnyKernel3 fork branch"
          fi
          validate_single_word "${IMAGE_TYPE}" "Kernel image type"

      - name: Setup build workspace and a local manifest
        env:
          USE_LATEST_CLANG: ${{ github.event.inputs.use_latest_clang }}
          CUSTOM_MANIFEST: .repo/local_manifests/custom.xml
        run: |
          REPO_SOURCE=$(echo ${COMMON_REPO} | cut -d'/' -f3)
          REPO_OWNER=$(echo ${COMMON_REPO} | cut -d'/' -f4)
          REPO_NAME=$(echo ${COMMON_REPO} | cut -d'/' -f5)

          mkdir kernel-build && cd $_
          mkdir -p .repo/local_manifests

          mecho() {
            echo "$1" >> "${CUSTOM_MANIFEST}"
          }

          mecho '<?xml version="1.0" encoding="UTF-8"?>'
          mecho '<manifest>'
          mecho "  <remote name=\"common-repo\" fetch=\"https://${REPO_SOURCE}/${REPO_OWNER}\" />"
          mecho ''
          mecho '  <remove-project name="kernel/common" />'
          mecho "  <project path=\"common\" name=\"${REPO_NAME}\" remote=\"common-repo\" revision=\"${COMMON_REPO_BRANCH}\" >"
          mecho '    <linkfile src="." dest=".source_date_epoch_dir" />'
          mecho '  </project>'

          if [ "${USE_LATEST_CLANG}" = true ]; then
            mecho '  <remove-project name="platform/prebuilts/clang/host/linux-x86" />'
            mecho '  <project path="prebuilts/clang/host/linux-x86" name="platform/prebuilts/clang/host/linux-x86" revision="main" clone-depth="1" />'
          fi

          mecho '</manifest>'

      - name: Download build utilities
        working-directory: kernel-build
        run: |
          if [ -z "${AK3_GIT_BRANCH}" ]
            then git clone --depth=1 ${AK3_GIT_URL} "${AK3_DIR}"
            else git clone --depth=1 ${AK3_GIT_URL} "${AK3_DIR}" -b ${AK3_GIT_BRANCH}
          fi

          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "${HOME}/.bin" >> ${GITHUB_PATH}

      - name: Clean up container
        uses: rokibhasansagar/slimhub_actions@main

      - name: Initialize the manifest, and sync
        working-directory: kernel-build
        run: |
          repo init \
            --no-tags \
            --depth=1 \
            --dissociate \
            -u https://android.googlesource.com/kernel/manifest \
            -b ${ACK_BRANCH}

          repo sync \
            --no-tags \
            --clone-bundle \
            --current-branch \
            --optimized-fetch \
            --force-sync \
            --fetch-submodules \
            -j$(nproc --all)

      # --- KernelSU auto-update ---
      - name: Update KernelSU to latest stable
        working-directory: kernel-build/common
        run: |
          echo "üîÑ Updating KernelSU to latest stable..."
          if [ -d "drivers/kernelsu" ]; then
            rm -rf drivers/kernelsu
          fi
          git clone --depth=1 https://github.com/tiann/KernelSU.git drivers/kernelsu
          if [ -f drivers/kernelsu/kernel.patch ]; then
            git apply drivers/kernelsu/kernel.patch || echo "‚ö†Ô∏è KernelSU patch may already be applied."
          fi
          echo "‚úÖ KernelSU updated to latest stable release."

      # --- SUSFS auto-patch ---
      - name: Apply latest stable SUSFS patch (android13-5.15)
        working-directory: kernel-build/common
        run: |
          echo "üîÑ Applying latest stable SUSFS patch for android13-5.15..."
          SUSFS_LATEST=$(curl -s https://api.github.com/repos/SUSFS/SUSFS/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
          if [ -z "$SUSFS_LATEST" ]; then
            echo "‚ö†Ô∏è Failed to fetch latest SUSFS release tag. Skipping patch."
            exit 0
          fi
          echo "üì¶ Latest SUSFS release: $SUSFS_LATEST"

          PATCH_FOUND=false
          for DIR in "patches/android13-5.15" "patches/5.15" "patches/common"; do
            SUSFS_PATCH_URL="https://raw.githubusercontent.com/SUSFS/SUSFS/${SUSFS_LATEST}/${DIR}/susfs-${SUSFS_LATEST}.patch"
            echo "üîç Checking ${SUSFS_PATCH_URL}"
            if curl --silent --fail -o susfs.patch "${SUSFS_PATCH_URL}"; then
              echo "‚úÖ Found SUSFS patch at ${DIR}"
              PATCH_FOUND=true
              break
            fi
          done

          if [ "$PATCH_FOUND" = false ]; then
            echo "‚ö†Ô∏è SUSFS patch not found. Skipping patch application."
            exit 0
          fi

          git apply --check susfs.patch || echo "‚ö†Ô∏è SUSFS patch already applied or partially merged. Skipping check."
          git apply susfs.patch || echo "‚ö†Ô∏è SUSFS patch may already be applied."
          echo "‚úÖ SUSFS ${SUSFS_LATEST} patch applied successfully."

      - name: Build, and process the kernel(s)
        working-directory: kernel-build
        env:
          EXTRA_ARGS: ${{ github.event.inputs.extra_args }}
          FAST_BUILD: ${{ github.event.inputs.fast_build }}
          USE_KLEAF: ${{ github.event.inputs.use_kleaf }}
          OUT_DIR: ${{ github.workspace }}/kernel-build/out
          OUT_BAZEL_DIR: ${{ github.workspace }}/kernel-build/bazel-bin/common
        run: |
          mkdir -p "${FINAL_DIR}"

          for config in ${BUILD_CONFIGS
